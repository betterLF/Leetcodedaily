611. 有效三角形的个数
先对数组进行排序，然后从末尾开始遍历，定义左右指针，left=0,right=i-1,只要left<right就一直while循环，如果当前两指针对应结点值小于等于当前遍历值，则left++，否则结果加上right-left(代表left到right-1的所有数和right组合都可以)，right--继续遍历，最后返回结果。
623. 在二叉树中增加一行
对于d==1时单独讨论，然后dfs遍历树，如果当前深度为d-1则先保存当前结点的左右子树，然后将当前结点的左右子树设置为要求的值，再将保存的结点与其相连即可。
636. 函数的独占时间
我们可以使用栈来模拟函数的调用，即在遇到一条包含 start 的日志时，我们将对应的函数 id 入栈；在遇到一条包含 end 的日志时，我们将对应的函数 id 出栈。在每一个时刻，栈中的所有函数均为被调用的函数，而栈顶的函数为正在执行的函数。
在每条日志的时间戳后，栈顶的函数会独占执行，直到下一条日志的时间戳，因此我们可以根据相邻两条日志的时间戳差值，来计算函数的独占时间。我们依次遍历所有的日志，对于第 i 条日志，如果它包含 start，那么栈顶函数从其时间戳 time[i] 开始运行，即 prev = time[i]；如果它包含 end，那么栈顶函数从其时间戳 time[i] 的下一个时间开始运行，即 prev = time[i] + 1。对于第 i + 1 条日志，如果它包含 start，那么在时间戳 time[i + 1] 时，有新的函数被调用，因此原来的栈顶函数的独占时间为 time[i + 1] - prev；如果它包含 end，那么在时间戳 time[i + 1] 时，原来的栈顶函数执行结束，独占时间为 time[i + 1] - prev + 1。在这之后，我们更新 prev 并遍历第 i + 2 条日志。在遍历结束后，我们就可以得到所有函数的独占时间。