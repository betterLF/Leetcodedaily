114. 二叉树展开为链表
递归，如果当前结点为空，返回null，如果不为空，则temp保存root.right，然后root.right=digui(root.left）,然后将root.left置为空。最后遍历该结点，如果newTemp.right不为空(newTemp=root)，继续，否则newTemp.right=digui(temp),最后返回root
116. 填充每个节点的下一个右侧节点指针
1：队列的层次遍历
2：因为是完美二叉树，所以可以遍历树，只要当前遍历的子节点不为空，就将该结点的子节点连接，先是相同的父节点的左子结点连右子结点，然后右子节点连接父节点的next域的左结点，依次下去，最后该层遍历完，下一个出发点为该层出发点的左子结点，下一个出发点的父节点为该层出发的子节点。
116. 填充每个节点的下一个右侧节点指针2
1：层次遍历
2：以子结点存在的父节点为父节点，以子节点(有左子结点就为左子结点，否则为右子结点)为当前要连接的结点，每次while遍历时，只要当前遍历的父节点两个子节点都在，就要进行两次拼接操作，使得拼接的下一个一定是另外一个父结点上的子节点。然后分情况，如果当前子节点有两个，就按上述所说，如果当前子节点没有，直接进到下一个父节点，如果有一个，就进行拼接，再进行到下一个子节点。该层拼接好后，找到下一层遍历的初始父节点和子节点即可(while判断当前层的出发点有没有子节点，没有后移，有就是当前结点)。
127. 单词接龙
广度优先搜索，从开始单词出发，遍历原集合，找到开始单词能转化的单词，将其加入队列中，并将该节点标记为已经访问过，直到找到结束单词为止，返回此时的深度即可