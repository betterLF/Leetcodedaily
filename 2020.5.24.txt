104. 二叉树的最大深度
递归前序遍历，返回 Math.max(preorder(root.left),preorder(root.right))+1;即左孩子和有孩子树的最大长度+1
73. 矩阵置零
定义布尔型row,colum代表第一行第一列是否有0，先遍历第一行和第一列，如果有值为0，就将
row和column置0，退出。然后遍历数组（除去第一行和第一列），如果有值为0，就将第一行该列和该行第一列置为0.然后遍历数组（除去第一行和第一列），只要matrix[i][0] == 0 || matrix[0][j] == 0，就将matrix[i][j]置为0，最后根据roe和column确认是否要将第一行第一列置为0。（不能直接对整个数组置0，因为你先对行置0时，可能会影响所判断的列）
589. N叉树的前序遍历
递归很简单
迭代：
定义一个栈存放树，每次将栈顶元素取出后，逆序存放该栈顶元素的孩子结点，这样每次取出的就是最左边的结点
105. 从前序与中序遍历序列构造二叉树
前序遍历的开始索引即为当前的根节点
此时中序遍历数组中根据此节点值就可以分为左右两个子树
然后
 int next=cur.get(preorder[start])
root.left=build2(preorder,start+1,left,next-1);
root.right=build2(preorder,start+next-left+1,next+1,right);
当前结点的左子树范围是left到next-1，当前右子树范围是next+1到right
（next指的是当前结点在中序遍历数组中的位置，cur是hashmap）
它key存放的是值，value存放的是下标
因为前序遍历是根节点->左子树->右子树的顺序
所以当前结点的左子树根节点下标为start+1
所以当前结点的右子树根节点下标为start+next-left+1（根节点位置+左子树个数+1）