153. 寻找旋转排序数组中的最小值
二分搜索，先对只有一个元素和元素本来有序的情况进行排除，然后进行二分搜索，如果当前中间值大于后一个值，返回后一个值，如果当前中间值小于前一个值，返回中间值，如果中间值大于第一个元素，说明左边有序而且肯定大于最小值，left后移，否则right前移
162. 寻找峰值
对数组没有元素和只有一个元素进行特殊化处理，然后如果第一个元素或者最后一个元素满足条件，直接返回结果，否则进行二分查找（从第二个元素和倒数第二个元素开始，这样每次二分中间值比较就不用考虑首尾了），满足条件返回下标否则先左二分，找不到在右二分。
165. 比较版本号
java双指针判断，针对每一个字符串，定义当前起点，如果值为0并且后面不为.或者数组末尾，起点后移，直到不为0为止，终点设置为起点+1，如果不到末尾或者不为.继续往后，最后得到起点和终点拼成的数字，然后两个进行比较，相等继续下一层（起点变成上一个终点），否则按情况返回，如果其中有一个大于数组
长度退出while循环，进行最后的判断，如果都大于自身数组长度返回0，否则根据情况返回结果（注意要判断另外一个没到末尾的是否后面数字为0）
166. 分数到小数
先对两个数的正负判断，确定是否加符号，然后定义整数位，如果此时余数不为0，就意味着存在小数，所以结果上加个点。定义一个hashmap，key存放余数（即下一个除数），vlaue存放当前的结果字符串长度，然后如果此时余数不为0，就一直while循环，如果hashmap中存在该余数，说明出现循环，则 ns.insert(map.get(r), "(");将左括号插入到出现循环前的位置，最后在末尾加入右括号。退出循环。否则将当前余数加入hashmap中，并将其对应的相除结果（余数*10再除）加入到结果集中，然后得到下一个余数即可。