66. 加一
从末尾开始加一，如果为10，该位赋值为0，继续往前，如果最后到达头部还要加一，就新建一个数组（长度比现在大一），再令首元素为1即可。
67. 二进制求和
定义一个进位字符串，对三个字符串进行逆序计算，分为值为0,1,2,3讨论，然后当两个字符串有一个到头时只对另外一个和进位字符串讨论，最后如果进位字符串为1，结果集就加1，否则判断末尾是不是0，是就删掉，最后如果结果集长度为0，就加0。
69. x 的平方根
利用二分查找搜索平方根，如果按照从0开始找会超时
二分时是右二分，即（left+right+1）/2开始，如果中间值平方小于X就left=mid,否则right=mid-1,
知道left>=right退出，返回此时的left值（可能会有大数，所以left和right用long型）
394. 字符串解码
构建辅助栈 stack， 遍历字符串 s 中每个字符 c；
当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；
当 c 为字母时，在 res 尾部添加 c；
当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 00：
记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；
记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × [...] 字符串。
进入到新 [ 后，res 和 multi 重新记录。
当 c 为 ] 时，stack 出栈，拼接字符串 res = last_res + cur_multi * res，其中:
last_res是上个 [ 到当前 [ 的字符串，例如 "3[a2[c]]" 中的 a；
cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 "3[a2[c]]" 中的 2。
返回字符串 res。
